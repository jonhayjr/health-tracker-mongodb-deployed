{"version":3,"sources":["Header/Header.js","Button/Button.js","Form/Form.js","Footer/Footer.js","NoteDetail/NoteDetail.js","App/App.js","reportWebVitals.js","index.js"],"names":["Header","Button","showAddTask","onClick","style","backgroundColor","className","Form","addNote","useState","date","setDate","diet","setDiet","mood","setMood","symptoms","setSymptoms","handleChange","e","name","target","value","onSubmit","preventDefault","htmlFor","type","id","onChange","required","rows","Footer","NoteDetail","notes","noteElements","map","note","index","App","setAddTask","setNotes","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3b15f0e.chunk.js","sourcesContent":["import './Header.css';\n\nconst Header = () => {\n    return (\n        <header>\n            <h1>Health Tracker App</h1> \n        </header>\n    )\n}\n\nexport default Header;","import React from 'react'\nimport './Button.css';\n\nconst Button = ({showAddTask, onClick}) => {\n\n    //Style Variable - Background color is based on showAddTask value\n    const style = {\n        backgroundColor: showAddTask ? '#adb5bd' : '#0d6efd'\n    }\n    return (\n        <div className='button'>\n            {/*Text and background color is based on showAddTask value*/}\n            <button onClick={onClick} className=\"btn\" style={style}>{showAddTask ? 'Close Note' : 'Add Note'}</button>\n        </div>\n    )\n}\n\nexport default Button\n","import {useState} from 'react';\nimport './Form.css';\n\nconst Form = ({addNote}) => {\n\n    const [date, setDate] = useState('');\n    const [diet, setDiet] = useState('');\n    const [mood, setMood] = useState('');\n    const [symptoms, setSymptoms] = useState('');\n\n    const handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n         if (name === 'date') {\n             setDate(value);\n         } else if (name === 'diet') {\n             setDiet(value);\n         } else if (name === 'mood') {\n             setMood(value);\n         } else if (name === 'symptoms') {\n             setSymptoms(value);\n         }\n    }\n\n    const handleSubmit = (e) => {\n        //Prevent Default Form Behavior\n        e.preventDefault();\n\n        //Create object with form values\n        const note = {\n            date,\n            diet,\n            mood,\n            symptoms\n        }\n        \n        //Add Note to notes array \n        addNote(note);\n\n        //Clear state for all form fields\n        setDate('');\n        setDiet('');\n        setMood('');\n        setSymptoms('');\n        \n        \n    }\n\n    return (\n        <div className=\"form\">\n            <h2>Add Note</h2>\n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"date\" className=\"form-label\">Date</label>\n                    <input type=\"date\" className=\"form-control\" id=\"date\" name=\"date\" value={date} onChange={handleChange} required/>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"diet\" className=\"form-label\">Diet</label>\n                    <textarea className=\"form-control\" id=\"diet\" name=\"diet\" rows=\"3\" onChange={handleChange} value={diet} required></textarea>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"mood\" className=\"form-label\">Mood</label>\n                    <textarea className=\"form-control\" id=\"mood\" name=\"mood\" rows=\"3\" onChange={handleChange} value={mood} required></textarea>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"symptoms\" className=\"form-label\">Symptoms</label>\n                    <textarea className=\"form-control\" id=\"symptoms\" name=\"symptoms\" rows=\"3\" onChange={handleChange} value={symptoms}></textarea>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary w-75\">Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Form;\n","import './Footer.css';\n\nconst Footer = () => {\n    return (\n        <footer className=\"sticky-bottom\">\n            <p>Copyright &copy; 2021 Jon Hay</p>  \n        </footer>\n    )\n}\n\nexport default Footer\n","import './NoteDetail.css';\n\nconst NoteDetail = ({notes}) => {\n\n    const noteElements = notes ?\n    notes.map((note, index) => \n        ( \n            <div className=\"card\" key={index}>\n                <div className=\"card-header\">\n                    {note.date}\n                </div>\n                <ul className=\"list-group list-group-flush\">\n                    <li className=\"list-group-item\">Diet: {note.diet}</li>\n                    <li className=\"list-group-item\">Mood: {note.mood}</li>\n                    <li className=\"list-group-item\">Symptoms: {note.symptoms}</li>\n                </ul>\n            </div>\n        )\n    )\n    : '';\n\n    return (\n        <div className=\"note-container\">\n          {\n             noteElements\n          }\n        </div>\n    )\n}\n\nexport default NoteDetail\n","import {useState} from 'react';\n\n//Import Components\nimport Header from '../Header/Header';\nimport Button from '../Button/Button';\nimport Form from '../Form/Form';\nimport Footer from '../Footer/Footer';\nimport NoteDetail from '../NoteDetail/NoteDetail';\n\nconst App = () => {\n\n  const [showAddTask, setAddTask] = useState(true);\n  const [notes, setNotes] = useState([]);\n\n  //Function to toggle show AddTaskForm\n  const toggleShowAddTask = () => {\n    setAddTask(!showAddTask);\n  }\n\n  //Function to add note to notes \n  const addNote = (note) => {\n    //Update notes based on previous state\n    setNotes(prevState => [...prevState, note]);\n  }\n\n  return (\n    <div>\n      <Header/>\n      <Button onClick={toggleShowAddTask} showAddTask={showAddTask}/>\n      {\n        showAddTask && <Form addNote={addNote}/>\n      }\n      <NoteDetail notes={notes}/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './normalize.css';\nimport './styles.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}